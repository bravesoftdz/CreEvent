{ ============================================
  Software Name : 	CreateEvent
  ============================================ }
{ ******************************************** }
{ Written By WalWalWalides }
{ CopyRight © 2019 }
{ Email : WalWalWalides@gmail.com }
{ GitHub :https://github.com/walwalwalides }
{ ******************************************** }
unit Main;

interface

uses
  System.UITypes, Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, ComCtrls, Contnrs, ExtCtrls, uEvent;

type
  TfrmMain = class(TForm)
    frmMainelListaReunioes: TLabel;
    ListBox: TListBox;
    BitBtnNew: TBitBtn;
    BitBtnDuplicate: TBitBtn;
    Panel: TPanel;
    LabelNomeReuniao: TLabel;
    edtName: TEdit;
    LabelData: TLabel;
    DateTimePickerDate: TDateTimePicker;
    LabelHora: TLabel;
    DateTimePickerTime: TDateTimePicker;
    LabelCategoria: TLabel;
    ColorBoxCategorie: TColorBox;
    LabelParticipantes: TLabel;
    MemDescription: TMemo;
    BitBtnSave: TBitBtn;
    procedure edtNameExit(Sender: TObject);
    procedure DateTimePickerDateExit(Sender: TObject);
    procedure BitBtnDuplicateClick(Sender: TObject);
    procedure BitBtnNewClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ListBoxClick(Sender: TObject);
    procedure DateTimePickerTimeExit(Sender: TObject);
    procedure ColorBoxCategorieExit(Sender: TObject);
    procedure MemDescriptionExit(Sender: TObject);
    procedure BitBtnSaveClick(Sender: TObject);
  private
    ListEvent: TObjectList;

    EventSelection: TEvent;

    procedure AdicionarNovaReuniaoNaListBox;
    procedure PreencherDados;
  end;

var
  frmMain: TfrmMain;

implementation

{$R *.dfm}

procedure TfrmMain.edtNameExit(Sender: TObject);
begin
  EventSelection.Name := Trim(edtName.Text);
end;

procedure TfrmMain.DateTimePickerDatfrmMain(Sender: TObject);
begin
  EventSelection.Date := DateTimePickerDate.Date;
end;

procedure TfrmMain.BitBtnDuplicate(Sender: TObject);
var
  EventClone: TEvent;
begin
  if ListBox.Count = 0 then
  begin
    MessageDlg('Não existem reuniões na lista! Clique em "Nova" para adicionar.', mtInformation, [mbOK], 0);
    BitBtnNew.SetFocus;
    Exit;
  end;

  EventClone := EventSelection.Clone;

  ListEvent.Add(EventClone);

  AdicionarNovaReuniaoNaListBox;

  PreencherDados;

  edtName.SetFocus;
end;

procedure TfrmMain.BitBtnNewClick(Sender: TObject);
var
  NewEvent: TEvent;
begin
  Panel.Visible := True;

  NewEvent := TEvent.Create;

  ListaReunioes.Add(NewEvent);

  AdicionarNovaReuniaoNaListBox;

  PreencherDados;

  edtName.SetFocus;
end;

procedure TfrmMain.BitBtnSaveClick(Sender: TObject);
begin
  //

end;

procedure TfrmMain.FormCreate(Sender: TObject);
begin
  ListaReunioes := TObjectList.Create;
end;

procedure TfrmMain.ListBoxClick(Sender: TObject);
begin
  PreencherDados;
end;

procedure TfrmMain.DateTimePickerTimeExit(Sender: TObject);
begin
  EventSelection.Time := DateTimePickerTime.Time;
end;

procedure TfrmMain.ColorBoxCategorieExit(Sender: TObject);
begin
 EventSelection.Categorie := ColorBoxCategorie.Selected;
end;

procedure TfrmMain.MemDescriptionExit(Sender: TObject);
begin
 EventSelection.Description := MemDescription.Text;
end;

procedure TfrmMain.AdicionarNovaReunfrmMainListBox;
begin
// adiciona um novo item na ListBox
ListBox.Items.Add('Reunião #' + IntToStr(ListBox.Items.Count + 1)); ListBox.ItemIndex := ListBox.Items.Count - 1;
end;

procedure TfrmMain.PreencherDados;
begin
EventSelection := List[ListBox.ItemIndex] as TEvent;
edtName.Text := EventSelection.Name;
DateTimePickerDate.Date := EventSelection.Date;
DateTimePickerHora.Time := EventSelection.Time;
ColorBoxCategorie.Selected := EventSelection.Categorie;
MemDescription.Text := EventSelection.Description;
end;

end.
